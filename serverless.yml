service: project-tgg-3
useDotenv: true
frameworkVersion: '3'

 
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: us-west-2
  memorySize: 512
  timeout: 10
  environment: 
    USERS_TABLE:  ${self:custom.userstableName}
    EMAIL_FROM_ADDR: "ankuratudemy@gmail.com"
custom:
  userstableName: usersTable-${opt:stage,self:provider.stage}
plugins:
  - serverless-offline
  - serverless-dotenv-plugin

functions:
  user:
    handler: functions/user/user.createUser
    description: "Creates a new user"
    events:
      - http:
          path: user
          method: post
          cors: true
    role: dynamodbLambdaRole
  getUser:
    handler: functions/user/user.getUser
    description: "Get a user info"
    events:
      - http:
          path: user/{email}
          method: get
          cors: true
    role: dynamodbLambdaRole
  getUsersByCountryAndCreateTime:
    handler: functions/user/user.getUsersByCountryAndCreateTime
    description: "Get a user by country"
    events:
      - http:
          path: usersbycountry
          method: post
          cors: true
    role: dynamodbLambdaRole
  getUsersByCountryAndCreateTimeScan:
    handler: functions/user/user.getUsersByCountryAndCreateTimeScan
    description: "Get a users by country using scan"
    events:
      - http:
          path: usersbycountryscan
          method: post
          cors: true
    role: dynamodbLambdaRole
  notifyUser:
    handler: functions/user/user.notifyUser
    description: "Sends modification information to user"
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: 
              - UsersTable
              - StreamArn
    role: dynamodbLambdaRole
resources:
  Resources:
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.userstableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: country
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: createdAtIndex
            KeySchema:
              - AttributeName: country
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 10
    dynamodbLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: dynamodbLambdaRole-${opt:stage, self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dynamodbLambdaRole-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'Fn::Join':
                          - ""
                          - 
                            - 'table/'
                            - Ref: UsersTable
                            - '*'
                - Effect: Allow
                  Action:
                   - ses:SendEmail
                   - ses:SendRawEmail
                  Resource: '*'